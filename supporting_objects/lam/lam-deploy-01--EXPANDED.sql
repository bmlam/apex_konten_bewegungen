
DEFINE base_path=&&1

col object_name format a40
col object_type format a20
col systimestamp formnat a30
col db_name formnat a30

spool lam-deploy-01.log

SET LINESize 120 pagesize 100

SELECT systimestamp, user, sys_context( 'userenv', 'db_name') db_name
FROM dual
;

PROMPT show invalid objects before deployment

SELECT object_name, object_type, status
FROM user_objects
WHERE status <> 'VALID'
;

PROMPT Tables
REM ********** imbedding script tables/app_action_audit.sql********** 
CREATE TABLE app_action_audit
( id NUMBER GENERATED ALWAYS AS IDENTITY
 ,app_key  VARCHAR2(100)       NOT NULL
 ,login_user VARCHAR2(30)
 ,app_session_id VARCHAR2(30)
 ,action_key     VARCHAR2(50) NOT NULL
 ,additional_info VARCHAR2(200)
 ,ts TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP  NOT NULL
);
REM ********** imbedding script tables/bank_account.sql********** 
CREATE TABLE  "BANK_ACCOUNT"
   (	"BANK_ALIAS" VARCHAR2(20 CHAR) NOT NULL ENABLE,
	"ACCOUNT_CODE" VARCHAR2(30 CHAR) NOT NULL ENABLE,
	"COMMENTS" VARCHAR2(300 CHAR),
	 CHECK ( trim( upper(account_code) )= account_code ) ENABLE,
	 UNIQUE ("ACCOUNT_CODE")
  USING INDEX  ENABLE
   )
/

ALTER TABLE BANK_ACCOUNT ADD ( id NUMBER  generated always as identity  )
;
ALTER TABLE BANK_ACCOUNT ADD primary key (id)
;
REM ********** imbedding script tables/bank_transaction.sql********** 
CREATE TABLE  "BANK_TRANSACTION"
   (	"ID" NUMBER GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE,
	"BOOKING_DATE" DATE,
	"VALUE_DATE" DATE,
	"TRANSACTION_TYPE" VARCHAR2(100),
	"BENEFICIARY_ORIGINATOR" VARCHAR2(100),
	"PAYMENT_DETAILS" VARCHAR2(400),
	"IBAN" VARCHAR2(22),
	"BIC" VARCHAR2(12),
	"CUSTOMER_REFERENCE" VARCHAR2(100),
	"MANDATE_REFERENCE" VARCHAR2(100),
	"CREDITOR_ID" VARCHAR2(100),
	"COMPENSATION_AMOUNT" NUMBER(10,2),
	"ORIGINAL_AMOUNT" NUMBER(10,2),
	"ULTIMATE_CREDITOR" VARCHAR2(100),
	"NUMBER_OF_TRANSACTIONS" NUMBER(2,0),
	"NUMBER_OF_CHEQUES" NUMBER(2,0),
	"DEBIT" NUMBER(10,2),
	"CREDIT" NUMBER(10,2),
	"CURRENCY" VARCHAR2(3),
	"BANK_ALIAS" VARCHAR2(20) NOT NULL ENABLE,
	"ACCOUNT_NO" VARCHAR2(30 CHAR) NOT NULL ENABLE,
	"LOAD_DT" DATE DEFAULT sysdate
   )
/
REM ********** imbedding script tables/imp_deutsche_bank.sql********** 
CREATE TABLE  IMP_DEUTSCHE_BANK
   (	"BOOKING_DATE" DATE,
	"VALUE_DATE" DATE,
	"TRANSACTION_TYPE" VARCHAR2(50),
	"BENEFICIARY___ORIGINATOR" VARCHAR2(50),
	"PAYMENT_DETAILS" VARCHAR2(255),
	"IBAN" VARCHAR2(50),
	"BIC" VARCHAR2(50),
	"CUSTOMER_REFERENCE" VARCHAR2(255),
	"MANDATE_REFERENCE" VARCHAR2(50),
	"CREDITOR_ID" VARCHAR2(50),
	"COMPENSATION_AMOUNT" VARCHAR2(4000),
	"ORIGINAL_AMOUNT" VARCHAR2(4000),
	"ULTIMATE_CREDITOR" VARCHAR2(4000),
	"NUMBER_OF_TRANSACTIONS" VARCHAR2(4000),
	"NUMBER_OF_CHEQUES" VARCHAR2(4000),
	"DEBIT" VARCHAR2(20),
	"CREDIT" VARCHAR2(4000),
	"CURRENCY" VARCHAR2(50),
	"BANK_CODE" VARCHAR2(20),
	"ACCOUNT_NO" VARCHAR2(20)
   )
/

ALTER TABLE IMP_DEUTSCHE_BANK ADD ( apex_sess_id NUMBER );

COMMENT ON TABLE IMP_DEUTSCHE_BANK IS 'import table for english CSV version of Deutsche Bank';
REM ********** imbedding script tables/imp_hvb_csv_deutsch.sql********** 
CREATE TABLE  "IMP_HVB_CSV_DEUTSCH"
   (	"KONTONUMMER" VARCHAR2(100 CHAR),
	"BUCHUNGSDATUM" DATE,
	"VALUTA" DATE,
	"EMPFAENGER1" VARCHAR2(100 CHAR),
	"EMPFAENGER2" VARCHAR2(100 CHAR),
	"VERWENDUNGSZWECK" VARCHAR2(500 CHAR),
	"BETRAG" VARCHAR2(100 CHAR),
	"WAEHRUNG" VARCHAR2(100 CHAR),
	"INSERT_DT" DATE DEFAULT sysdate,
	"APEX_SESS_ID" NUMBER
   )
/
REM ********** imbedding script tables/imp_deutsche_bank_csv_deutsch.sql********** 
CREATE TABLE  "IMP_DEUTSCHE_BANK_CSV_DEUTSCH"
   (	"ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE,
	"BUCHUNGSTAG" DATE,
	"WERT" DATE,
	"UMSATZART" VARCHAR2(50),
	"BEGÜNSTIGTER___AUFTRAGGEBER" VARCHAR2(255),
	"VERWENDUNGSZWECK" VARCHAR2(255),
	"IBAN" VARCHAR2(50),
	"BIC" VARCHAR2(50),
	"KUNDENREFERENZ" VARCHAR2(100 CHAR),
	"MANDATSREFERENZ" VARCHAR2(100 CHAR),
	"GLÄUBIGER_ID" VARCHAR2(50),
	"FREMDE_GEBÜHREN" VARCHAR2(4000),
	"BETRAG" VARCHAR2(4000),
	"ABWEICHENDER_EMPFÄNGER" VARCHAR2(4000),
	"ANZAHL_DER_AUFTRÄGE" VARCHAR2(4000),
	"ANZAHL_DER_SCHECKS" VARCHAR2(4000),
	"SOLL" VARCHAR2(100),
	"HABEN" VARCHAR2(100),
	"WÄHRUNG" VARCHAR2(50),
	"INSERT_DT" DATE DEFAULT sysdate,
	"APEX_SESS_ID" NUMBER,
	 PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   )
/
REM ********** imbedding script tables/imp_deutsche_bank_legacy.sql********** 
CREATE TABLE  imp_deutsche_bank_legacy
   (	"KTO_NR" VARCHAR2(20 BYTE) NOT NULL ENABLE,
	"VORG_ID" NUMBER(12,0) NOT NULL ENABLE,
	"VORG_DAT" DATE NOT NULL ENABLE,
	"WERT_DAT" DATE NOT NULL ENABLE,
	"SUMME" NUMBER(12,2) NOT NULL ENABLE,
	"TEXT" VARCHAR2(1000 BYTE),
	"AKAT" VARCHAR2(2 BYTE),
	"MAN_UPD" CHAR(1 BYTE),
	"LOAD_DT" DATE DEFAULT sysdate,
	"UMSATZ_ART" VARCHAR2(30 BYTE)
	, 	 PRIMARY KEY ("VORG_ID")
	);

PROMPT Table Triggers
REM ********** imbedding script tables/imp_deutsche_bank_csv_deutsch_t1.sql********** 
create or replace trigger IMP_DEUTSCHE_BANK_CSV_DEUTSCH_T1
BEFORE
insert or update or delete on IMP_DEUTSCHE_BANK_CSV_DEUTSCH
for each row
begin
  CASE
  WHEN INSERTING
  THEN
    IF :new.apex_sess_id IS NULL
    THEN
      :new.apex_sess_id := coalesce (APEX_CUSTOM_AUTH.GET_SESSION_ID, -1);
    END IF;
  ELSE
    NULL;
  END CASE;
end;
/

show error
REM ********** imbedding script tables/imp_deutsche_bank_trg1.sql********** 
create or replace trigger IMP_DEUTSCHE_BANK_TRG1
BEFORE
insert or update or delete on IMP_DEUTSCHE_BANK
for each row
begin
  CASE
  WHEN INSERTING
  THEN
    IF :new.apex_sess_id IS NULL
    THEN
      :new.apex_sess_id := coalesce (APEX_CUSTOM_AUTH.GET_SESSION_ID, -1);
    END IF;
  ELSE
    NULL;
  END CASE;
end;
/

show error
REM ********** imbedding script tables/imp_hvb_csv_deutsch_trg1.sql********** 
create or replace trigger imp_hvb_csv_deutsch_trg1
BEFORE
insert or update or delete on imp_hvb_csv_deutsch
for each row
begin
  CASE
  WHEN INSERTING
  THEN
    IF :new.apex_sess_id IS NULL
    THEN
      :new.apex_sess_id := coalesce (APEX_CUSTOM_AUTH.GET_SESSION_ID, -1);
    END IF;
  ELSE
    NULL;
  END CASE;
end;
/


show error


PROMPT Views
REM ********** imbedding script views/v_bank_account_lovs.sql********** 
CREATE OR REPLACE VIEW v_bank_account_lovs
AS
SELECT account_code account_id , bank_alias bank_code , bank_alias||': '||account_code||' '||substr( comments, 1, 50) as lov_description
FROM bank_account
/
REM ********** imbedding script views/v_bank_transaction_facet.sql********** 
CREATE OR REPLACE VIEW v_bank_transaction_facet
AS
SELECT id,
       bank_alias,
       account_no,
       booking_date,       value_date,
        "Soll",
        "Haben",
       debit,
       credit,
       currency,
       transaction_type,
       payment_details,
       iban_counterparty,
       bic_counterparty,
       year_booking,
       month_booking,
       beneficiary_originator,
       customer_reference,
       mandate_reference,
       creditor_id,
       compensation_amount,
       original_amount,
       ultimate_creditor,
       number_of_transactions,
       number_of_cheques,
       load_dt
       ,amount
  FROM v_bank_transaction_facet_base
/

PROMPT Functions

PROMPT Package specifications
REM ********** imbedding script packages/pkg_kto_bwg-def.sql********** 
CREATE OR REPLACE PACKAGE pkg_kto_bwg
AS
  PROCEDURE delete_scoped_transaction
  ( p_period_begin DATE
   ,p_period_end   DATE
   ,p_account_no   VARCHAR2
   ,p_autocommit   BOOLEAN DEFAULT TRUE
  );

  PROCEDURE transfer_xact_hvb_to_main
  (
    pi_bank_alias VARCHAR2
    ,pi_bank_code VARCHAR2
    ,pi_csv_version VARCHAR2 DEFAULT 'DE'
    ,p_autocommit  BOOLEAN DEFAULT TRUE
  );


PROCEDURE transfer_xact_deu_bank_to_main
(
    pi_bank_alias VARCHAR2
    ,pi_bank_code VARCHAR2
    ,pi_csv_version VARCHAR2 DEFAULT 'EN'
    ,p_autocommit  BOOLEAN DEFAULT TRUE
);

END;
/
show errors

PROMPT Package bodies
REM ********** imbedding script packages/pkg_kto_bwg-impl.sql********** 
CREATE OR REPLACE PACKAGE BODY pkg_kto_bwg
AS
  gc_pkg_name user_objects.object_name%TYPE := $$plsql_unit;
  gc_date_mask VARCHAR2(20) := 'yyyy.mm.dd';

  PROCEDURE audit_action
  ( pi_action_key VARCHAR2
   ,pi_additional_info VARCHAR2
  ) AS
  BEGIN
   INSERT INTO app_action_audit
    ( login_user
      ,app_key
      ,action_key
      ,additional_info
    ) VALUES
    ( COALESCE ( v('APP_USER')
                , sys_context('userenv', 'current_user')||':'||sys_context('userenv', 'os_user') )
      , COALESCE( V('APP_NAME'), gc_pkg_name )
      , pi_action_key
      , pi_additional_info
    );
  END audit_action;

  PROCEDURE check_conflict_with_target
  ( pi_bank_alias VARCHAR2
   ,pi_account_no VARCHAR2
   ,pi_period_begin DATE
   ,pi_period_end   DATE
   ,po_conflict_count OUT NUMBER
  ) AS
  BEGIN
    select COUNT(1)
    into po_conflict_count
    from bank_transaction
    where bank_alias = pi_bank_alias
      and account_no = pi_account_no
      AND booking_date BETWEEN pi_period_begin AND pi_period_end
    ;
  END check_conflict_with_target;

  PROCEDURE delete_scoped_transaction
  ( p_period_begin DATE
   ,p_period_end   DATE
   ,p_account_no   VARCHAR2
   ,p_autocommit   BOOLEAN DEFAULT TRUE
  	)
  AS
    l_sql_rowcount NUMBER;
  BEGIN
    pck_std_log.info( a_comp=> $$plsql_unit, a_subcomp=>'Line'||$$plsql_line
            , a_text=> ' period begin:'|| to_char( p_period_begin, gc_date_mask )
                || ' end:'|| to_char( p_period_end, gc_date_mask )
                || ' accountno:'|| p_account_no
        );

    DELETE bank_transaction
    WHERE p_account_no = account_no
      AND booking_date BETWEEN p_period_begin AND p_period_end
    ;
    l_sql_rowcount := SQL%ROWCOUNT;

    audit_action
    ( pi_action_key => 'DELETE_SCOPED_TRANSACTION'
     ,pi_additional_info => 'Rows: '||l_sql_rowcount
    );

    IF p_autocommit THEN
      COMMIT;
    END IF;

  EXCEPTION
    WHEN OTHERS THEN
      pck_std_log.error( a_err_code=> sqlcode, a_text=> sqlerrm, a_comp=> gc_pkg_name );
      IF p_autocommit THEN
        ROLLBACK;
      END IF;
      RAISE;
END delete_scoped_transaction;

/*********************************************************************************/

PROCEDURE transfer_xact_hvb_to_main
(    pi_bank_alias VARCHAR2
    ,pi_bank_code VARCHAR2
    ,pi_csv_version VARCHAR2 DEFAULT 'DE'
   ,p_autocommit   BOOLEAN DEFAULT TRUE
)
AS
    lc_module VARCHAR2(100);

    l_in_same_period_count NUMBER;

    l_min_xact_dt_src DATE;
    l_max_xact_dt_src DATE;
    l_xact_dt_range_conflicts BOOLEAN;
    l_sql_rowcount NUMBER;
BEGIN
    IF pi_csv_version NOT IN ( 'EN', 'DE') THEN
        RAISE_APPLICATION_ERROR( 20001, 'pi_csv_version '||substr(pi_csv_version, 1, 3)||' is invalid for '||lc_module );
    END IF;

    pck_std_log.info( a_comp=> $$plsql_unit, a_subcomp=>'Line'||$$plsql_line
            , a_text=> 'alias:'||pi_bank_alias
                || ' acc:'||pi_bank_code
        );

    CASE pi_csv_version
    WHEN 'DE'
    THEN
        SELECT min( buchungsdatum), max(buchungsdatum)
        into l_min_xact_dt_src, l_max_xact_dt_src
        FROM    imp_hvb_csv_deutsch
        WHERE apex_sess_id = APEX_CUSTOM_AUTH.GET_SESSION_ID
        ;
    END CASE;

    check_conflict_with_target
      ( pi_bank_alias => pi_bank_alias
       ,pi_account_no => pi_bank_code
       ,pi_period_begin => l_min_xact_dt_src
       ,pi_period_end   => l_max_xact_dt_src
       ,po_conflict_count => l_in_same_period_count
    );

    l_xact_dt_range_conflicts := l_in_same_period_count > 0;

     pck_std_log.info( a_comp=> $$plsql_unit, a_subcomp=>'Line'||$$plsql_line
            , a_text=> ' l_min_xact_dt_src:'|| to_char( l_min_xact_dt_src, gc_date_mask )
                || ' l_max_xact_dt_src:'|| to_char( l_max_xact_dt_src, gc_date_mask )
                || ' l_in_same_period_count: '|| l_in_same_period_count
        );

    CASE
    WHEN l_xact_dt_range_conflicts THEN
        RAISE_APPLICATION_ERROR( -20001,
            'Mindestens '||l_in_same_period_count||' Eintraege in der Period :'
              || to_char(l_min_xact_dt_src, gc_date_mask )
              || ' bis '
              || to_char(l_min_xact_dt_src , gc_date_mask )
              ||' existieren bereits für das gleiche Konto!'
              );
    WHEN l_min_xact_dt_src IS NULL  THEN
        RAISE_APPLICATION_ERROR( -20001, 'Die zu importierenden Daten haben anscheinend kein buchungsdatum!');
    WHEN NOT l_xact_dt_range_conflicts
    THEN
        --pck_std_log.info( a_comp=> $$plsql_unit, a_subcomp=>'Line'||$$plsql_line   , a_text=> ' got here');
        CASE pi_csv_version
        WHEN 'DE'
        THEN
            INSERT INTO bank_transaction
            (   BOOKING_DATE,            VALUE_DATE,                 PAYMENT_DETAILS
             , DEBIT,            CREDIT,            CURRENCY,            BANK_ALIAS,            ACCOUNT_NO
            )
            WITH transform1_  AS  (
                SELECT to_number( betrag, '999G999G999D99', ' NLS_NUMERIC_CHARACTERS = '',.'' ') AS betrag
                    ,buchungsdatum,                valuta,                 VERWENDUNGSZWECK
                    ,waehrung
                  FROM imp_hvb_csv_deutsch a
                  WHERE apex_sess_id = APEX_CUSTOM_AUTH.GET_SESSION_ID
                ) , imp_ AS (
              SELECT
                 CASE WHEN  betrag  <  0 THEN abs( betrag ) END as soll
                ,CASE WHEN  betrag  >= 0 THEN abs( betrag ) END as haben
                , a.*
              FROM transform1_ a
            )
            select
                buchungsdatum,                valuta,                 VERWENDUNGSZWECK,
                SOLL,                HABEN,              waehrung,            pi_bank_alias ,            pi_bank_code
            FROM imp_
            ;
            l_sql_rowcount := SQL%ROWCOUNT;
        END CASE; -- Language ok

        audit_action
        ( pi_action_key => UPPER('transfer_xact_hvb_to_main:'||pi_csv_version)
         ,pi_additional_info => 'Rows: '||l_sql_rowcount
        );

    END CASE;

    CASE pi_csv_version
    WHEN 'DE'
    THEN
        DELETE FROM    imp_hvb_csv_deutsch
        WHERE apex_sess_id = APEX_CUSTOM_AUTH.GET_SESSION_ID
        ;
    END CASE;
    IF p_autocommit THEN
      COMMIT;
    END IF;
EXCEPTION
    WHEN OTHERS THEN
      pck_std_log.error( a_err_code=> sqlcode, a_comp=> $$plsql_unit, a_subcomp=>'Line'||$$plsql_line, a_text=> sqlerrm);
      IF p_autocommit THEN
        ROLLBACK;
      END IF;
        RAISE;
END transfer_xact_hvb_to_main;

/*********************************************************************************/

PROCEDURE transfer_xact_deu_bank_to_main
(
    pi_bank_alias VARCHAR2
    ,pi_bank_code VARCHAR2
    ,pi_csv_version VARCHAR2 DEFAULT 'EN'
    ,p_autocommit  BOOLEAN DEFAULT TRUE
)
AS
    l_in_same_period_count NUMBER;
    l_min_xact_dt_src DATE;
    l_max_xact_dt_src DATE;
    l_xact_dt_range_conflicts BOOLEAN;
    l_bank_alias_used bank_transaction.bank_alias%TYPE;
BEGIN
    IF pi_csv_version NOT IN ( 'EN', 'DE') THEN
        RAISE_APPLICATION_ERROR( 20001, 'pi_csv_version '||substr(pi_csv_version, 1, 3)||' is invalid for procedure in '||gc_pkg_name||':ln'||$$plsql_line );
    END IF;

    pck_std_log.info( a_comp=> $$plsql_unit, a_subcomp=>'Line'||$$plsql_line
            , a_text=> 'alias:'||pi_bank_alias
                || ' acc:'||pi_bank_code
                || ' lang:'||pi_csv_version
        );

    l_bank_alias_used := pi_bank_alias;
    IF nvl(pi_bank_alias, '?') = '?' AND pi_bank_code IS NOT NULL
    THEN
        SELECT bank_code
        INTO  l_bank_alias_used
        FROM v_bank_account_lovs
        WHERE account_id = pi_bank_code
        ;
    END IF;

    /* compute period of transaction we are going to insert into the target table
    and make sure no single transaction within this period exists in the target
    This is to avoid duplicate data.
     */
    CASE pi_csv_version
    WHEN 'EN'
    THEN
        select min(booking_date), max(booking_date)
        into l_min_xact_dt_src, l_max_xact_dt_src
        from imp_deutsche_bank
        WHERE apex_sess_id = APEX_CUSTOM_AUTH.GET_SESSION_ID
        ;
    WHEN 'DE'
    THEN
        SELECT min( buchungstag), max(buchungstag)
        into l_min_xact_dt_src, l_max_xact_dt_src
        FROM    IMP_DEUTSCHE_BANK_CSV_DEUTSCH
        WHERE apex_sess_id = APEX_CUSTOM_AUTH.GET_SESSION_ID
        ;
    END CASE;

    check_conflict_with_target
      ( pi_bank_alias => l_bank_alias_used
       ,pi_account_no => pi_bank_code
       ,pi_period_begin => l_min_xact_dt_src
       ,pi_period_end   => l_max_xact_dt_src
       ,po_conflict_count => l_in_same_period_count
    );
    l_xact_dt_range_conflicts := l_in_same_period_count > 0
        ;

    pck_std_log.info( a_comp=> $$plsql_unit, a_subcomp=>'Line'||$$plsql_line
            , a_text=> ' l_min_xact_dt_src:'|| to_char( l_min_xact_dt_src, gc_date_mask )
                || ' l_max_xact_dt_src:'|| to_char( l_max_xact_dt_src, gc_date_mask )
                || ' l_in_same_period_count: '|| l_in_same_period_count
        );

    CASE
    WHEN l_xact_dt_range_conflicts
    THEN
        RAISE_APPLICATION_ERROR( -20001,
            'Mindestens '||l_in_same_period_count||' Eintraege in der Period :'
              || to_char(l_min_xact_dt_src, gc_date_mask )
              || ' bis '
              || to_char(l_min_xact_dt_src , gc_date_mask )
              ||' existieren bereits für das gleiche Konto!'
              );
    WHEN l_min_xact_dt_src IS NULL
    THEN
        RAISE_APPLICATION_ERROR( -20001, 'Die zu importierenden Daten haben anscheinend kein buchungsdatum!');
    WHEN NOT l_xact_dt_range_conflicts
    THEN
        --pck_std_log.info( a_comp=> $$plsql_unit, a_subcomp=>'Line'||$$plsql_line   , a_text=> ' got here');
        CASE pi_csv_version
        WHEN 'EN'
        THEN
            INSERT INTO bank_transaction
            (   BOOKING_DATE,            VALUE_DATE,            TRANSACTION_TYPE,            BENEFICIARY_ORIGINATOR,            PAYMENT_DETAILS,
            IBAN,            BIC,            CUSTOMER_REFERENCE,            MANDATE_REFERENCE,            CREDITOR_ID,
            COMPENSATION_AMOUNT,            ORIGINAL_AMOUNT,            ULTIMATE_CREDITOR,            NUMBER_OF_TRANSACTIONS,            NUMBER_OF_CHEQUES,
            DEBIT,            CREDIT,            CURRENCY,            BANK_ALIAS,            ACCOUNT_NO
            )
            SELECT  BOOKING_DATE,            VALUE_DATE,            TRANSACTION_TYPE,            BENEFICIARY___ORIGINATOR,            PAYMENT_DETAILS,
            IBAN,            BIC,            CUSTOMER_REFERENCE,            MANDATE_REFERENCE,            CREDITOR_ID,
            COMPENSATION_AMOUNT,            ORIGINAL_AMOUNT,            ULTIMATE_CREDITOR,            NUMBER_OF_TRANSACTIONS,            NUMBER_OF_CHEQUES,
            DEBIT,            CREDIT,            CURRENCY,            l_bank_alias_used ,            pi_bank_code
            from IMP_DEUTSCHE_BANK s
            ;

        WHEN 'DE'
        THEN
            INSERT INTO bank_transaction
            (   BOOKING_DATE,            VALUE_DATE,            TRANSACTION_TYPE,            BENEFICIARY_ORIGINATOR,            PAYMENT_DETAILS,
            IBAN,            BIC,            CUSTOMER_REFERENCE,            MANDATE_REFERENCE,            CREDITOR_ID,
            COMPENSATION_AMOUNT,            ORIGINAL_AMOUNT,            ULTIMATE_CREDITOR,            NUMBER_OF_TRANSACTIONS,            NUMBER_OF_CHEQUES,
            DEBIT,
            CREDIT,
            CURRENCY,            BANK_ALIAS,            ACCOUNT_NO
            )
            select
                BUCHUNGSTAG,                WERT,                UMSATZART,                "BEGÜNSTIGTER___AUFTRAGGEBER",                VERWENDUNGSZWECK,
                IBAN,                BIC,                KUNDENREFERENZ,                MANDATSREFERENZ,                "GLÄUBIGER_ID",
                "FREMDE_GEBÜHREN",                BETRAG,                "ABWEICHENDER_EMPFÄNGER",                "ANZAHL_DER_AUFTRÄGE",                ANZAHL_DER_SCHECKS,
                TO_NUMBER( soll,  '999g999g999d99' ,q'[NLS_NUMERIC_CHARACTERS = ',.']' )   SOLL,
                TO_NUMBER( haben, '999g999g999d99' ,q'[NLS_NUMERIC_CHARACTERS = ',.']' )   HABEN,
                "WÄHRUNG",            l_bank_alias_used ,            pi_bank_code
            from IMP_DEUTSCHE_BANK_CSV_DEUTSCH a
            WHERE apex_sess_id = APEX_CUSTOM_AUTH.GET_SESSION_ID
            ;
        END CASE; -- Language ok
    END CASE;

    CASE pi_csv_version
    WHEN 'EN'
    THEN
        DELETE from imp_deutsche_bank
        WHERE apex_sess_id = APEX_CUSTOM_AUTH.GET_SESSION_ID
        ;
    WHEN 'DE'
    THEN
        DELETE FROM    IMP_DEUTSCHE_BANK_CSV_DEUTSCH
        WHERE apex_sess_id = APEX_CUSTOM_AUTH.GET_SESSION_ID
        ;
    END CASE;

    IF p_autocommit THEN
      COMMIT;
    END IF;
EXCEPTION
    WHEN OTHERS THEN
      pck_std_log.error( a_err_code=> sqlcode, a_comp=> $$plsql_unit, a_subcomp=>'Line'||$$plsql_line, a_text=> sqlerrm);
      IF p_autocommit THEN
        ROLLBACK;
      END IF;
      RAISE;
END transfer_xact_deu_bank_to_main;
END;
/
show errors

PROMPT Procedures
REM ********** imbedding script procedures/transfer_xact_hvb_to_main.sql********** 
CREATE OR REPLACE PROCEDURE transfer_xact_hvb_to_main
(
    pi_bank_alias VARCHAR2
    ,pi_bank_code VARCHAR2
    ,pi_csv_version VARCHAR2 DEFAULT 'DE'
)
AS
BEGIN
    pkg_kto_bwg.transfer_xact_hvb_to_main
    (
        pi_bank_alias => pi_bank_alias
        ,pi_bank_code => pi_bank_code
        ,pi_csv_version => pi_csv_version
    );

END;
/


show error

REM ********** imbedding script procedures/transfer_xact_deu_bank_to_main.sql********** 
CREATE OR REPLACE PROCEDURE transfer_xact_deu_bank_to_main
(    pi_bank_alias VARCHAR2
    ,pi_bank_code VARCHAR2
    ,pi_csv_version VARCHAR2 DEFAULT 'EN'
)
AS
BEGIN
    pkg_kto_bwg.transfer_xact_deu_bank_to_main
    (    pi_bank_alias => pi_bank_alias
        ,pi_bank_code  => pi_bank_code
        ,pi_csv_version => pi_csv_version
    );

END;
/


show error


begin dbms_utility.compile_schema ( 'LAM', compile_all => FALSE);
end;
/

PROMPT show invalid objects after deployment

SELECT object_name, object_type, status
FROM user_objects
WHERE status <> 'VALID'
;

spool off
